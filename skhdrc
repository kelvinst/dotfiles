# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# restart the service (reload everything)
cmd + shift + ctrl - 0x2B : yabai --stop-service && yabai --start-service

# reload the layout
cmd + shift + ctrl - r : yabai -m config layout bsp window_placement first_child

# focus window
cmd + shift + ctrl - h : yabai -m window --focus west
cmd + shift + ctrl - j : yabai -m window --focus south
cmd + shift + ctrl - k : yabai -m window --focus north
cmd + shift + ctrl - l : yabai -m window --focus east

# set insertion point in focused container
cmd + shift + ctrl + alt - h : yabai -m window --insert west
cmd + shift + ctrl + alt - j : yabai -m window --insert south
cmd + shift + ctrl + alt - k : yabai -m window --insert north
cmd + shift + ctrl + alt - l : yabai -m window --insert east

# swap managed window
cmd + shift + ctrl - y : yabai -m window --swap west
cmd + shift + ctrl - u : yabai -m window --swap south
cmd + shift + ctrl - i : yabai -m window --swap north
cmd + shift + ctrl - o : yabai -m window --swap east

# move managed window
cmd + shift + ctrl + alt - y : yabai -m window --warp west
cmd + shift + ctrl + alt - u : yabai -m window --warp south
cmd + shift + ctrl + alt - i : yabai -m window --warp north
cmd + shift + ctrl + alt - o : yabai -m window --warp east

# balance size of windows
cmd + shift + ctrl - 0 : yabai -m space --balance

# create space and follow focus
cmd + shift + ctrl - c : yabai -m space --create && \
                         index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                         yabai -m space --focus "${index}"

# create desktop, move window and follow focus
cmd + shift + ctrl + alt - c : yabai -m space --create && \
                               index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                               yabai -m window --space "${index}" && \
                               yabai -m space --focus "${index}"

# delete space
cmd + shift + ctrl - x : yabai -m space --destroy

# focus spaces
cmd + shift + ctrl - n : index="$(yabai -m query --spaces --space | jq '.index + 1')" && \
                         max_index="$(yabai -m query --spaces --display | jq 'map(.index) | max')" && \
                         if [ "$index" -le "$max_index" ]; then \
                           yabai -m space --focus "$index"; \
                         fi
cmd + shift + ctrl - p : index="$(yabai -m query --spaces --space | jq '.index - 1')" && \
                         min_index="$(yabai -m query --spaces --display | jq 'map(.index) | min')" && \
                         if [ "$index" -ge "$min_index" ]; then \
                           yabai -m space --focus "$index"; \
                         fi

# move window to spaces
cmd + shift + ctrl + alt - n : index="$(yabai -m query --spaces --space | jq '.index + 1')" && \
                               max_index="$(yabai -m query --spaces --display | jq 'map(.index) | max')" && \
                               id="$(yabai -m query --windows --window | jq '.id')" && \
                               if [ "$index" -le "$max_index" ]; then \
                                     yabai -m window --space "${index}" && \
                                     yabai -m window --focus "${id}" ; \
                               fi
cmd + shift + ctrl + alt - p : index="$(yabai -m query --spaces --space | jq '.index - 1')" && \
                               min_index="$(yabai -m query --spaces --display | jq 'map(.index) | min')" && \
                               id="$(yabai -m query --windows --window | jq '.id')" && \
                               if [ "$index" -ge "$min_index" ]; then \
                                     yabai -m window --space "${index}" && \
                                     yabai -m window --focus "${id}" ; \
                               fi

# focus display
cmd + shift + ctrl - a : yabai -m display --focus west
cmd + shift + ctrl - d : yabai -m display --focus east

# move window to displays
cmd + shift + ctrl + alt - a : yabai -m window --display west && \
                               yabai -m display --focus west
cmd + shift + ctrl + alt - d : yabai -m window --display east && \
                               yabai -m display --focus east

# reenable focus follows mouse
cmd + shift + ctrl - m : yabai -m config focus_follows_mouse autofocus

# toggle window zoom
cmd + shift + ctrl - z : yabai -m window --toggle zoom-fullscreen
cmd + shift + ctrl + alt - z : yabai -m window --toggle zoom-parent

# toggle window split type
cmd + shift + ctrl - s : yabai -m window --toggle split

# float / unfloat window and center on screen
cmd + shift + ctrl - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), picture-in-picture
cmd + shift + ctrl + alt - t : yabai -m window --toggle sticky --toggle pip

# 3 column layout (when 3 screens are open)
cmd + shift + ctrl - 3 : yabai -m config layout bsp && \
                         yabai -m window --toggle split && \
                         yabai -m window --swap east && \
                         yabai -m space --balance
