# NOTE: Documentation {{{

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
# }}}

# NOTE: kitty {{{

# open kitty
cmd + ctrl - return : kitty --single-instance --directory ~

# open a quick access kitty
cmd + ctrl + shift - return : kitten quick-access-terminal

# }}}

# NOTE: yabai {{{

# restart the yabai service (reload everything from scratch, key: `,`)
alt + ctrl - 0x2B : yabai --stop-service && yabai --start-service

# swap to main
alt + ctrl - return : yabai -m window --swap last
alt + ctrl + shift - return : yabai -m window --swap first

# mirror layout (key: `/`)
alt + ctrl - 0x2A : yabai -m space --mirror y-axis
alt + ctrl + shift - 0x2A : yabai -m space --mirror x-axis

# focus window
alt + ctrl - h : yabai -m window --focus west
alt + ctrl - j : yabai -m window --focus south
alt + ctrl - k : yabai -m window --focus north
alt + ctrl - l : yabai -m window --focus east

# swap managed window
alt + ctrl + shift - h : yabai -m window --swap west
alt + ctrl + shift - j : yabai -m window --swap south
alt + ctrl + shift - k : yabai -m window --swap north
alt + ctrl + shift - l : yabai -m window --swap east

# move managed window
alt + ctrl - y : yabai -m window --warp west
alt + ctrl - u : yabai -m window --warp south
alt + ctrl - i : yabai -m window --warp north
alt + ctrl - o : yabai -m window --warp east

# set insertion point in focused container
alt + ctrl + shift - y : yabai -m window --insert west
alt + ctrl + shift - u : yabai -m window --insert south
alt + ctrl + shift - i : yabai -m window --insert north
alt + ctrl + shift - o : yabai -m window --insert east

# equalize size of windows
alt + ctrl - e : yabai -m space --equalize

# balance size of windows
alt + ctrl - b : yabai -m space --balance

# create space and follow focus
alt + ctrl - c : create_space

# create desktop, move window and follow focus
alt + ctrl + shift - c : create_space_and_move_window

# delete space
alt + ctrl - d : yabai -m space --destroy

# focus spaces
alt + ctrl - n : focus_next_space
alt + ctrl - p : focus_previous_space
alt + ctrl - 1 : yabai -m space --focus 1
alt + ctrl - 2 : yabai -m space --focus 2
alt + ctrl - 3 : yabai -m space --focus 3
alt + ctrl - 4 : yabai -m space --focus 4
alt + ctrl - 5 : yabai -m space --focus 5
alt + ctrl - 6 : yabai -m space --focus 6
alt + ctrl - 7 : yabai -m space --focus 7
alt + ctrl - 8 : yabai -m space --focus 8
alt + ctrl - 9 : yabai -m space --focus 9
alt + ctrl - 0 : yabai -m space --focus 10

# move window to spaces
alt + ctrl + shift - n : move_window_to_next_space 
alt + ctrl + shift - p : move_window_to_previous_space
alt + ctrl + shift - 1 : move_window_to_space 1
alt + ctrl + shift - 2 : move_window_to_space 2
alt + ctrl + shift - 3 : move_window_to_space 3
alt + ctrl + shift - 4 : move_window_to_space 4
alt + ctrl + shift - 5 : move_window_to_space 5
alt + ctrl + shift - 6 : move_window_to_space 6
alt + ctrl + shift - 7 : move_window_to_space 7
alt + ctrl + shift - 8 : move_window_to_space 8
alt + ctrl + shift - 9 : move_window_to_space 9
alt + ctrl + shift - 0 : move_window_to_space 10

# reenable focus follows mouse
alt + ctrl - m : yabai -m config focus_follows_mouse autofocus

# toggle window zoom
alt + ctrl - z : yabai -m window --toggle zoom-fullscreen
alt + ctrl + shift - z : yabai -m window --toggle zoom-parent

# toggle window split type
alt + ctrl - s : yabai -m window --toggle split

# float / unfloat window and center on screen
alt + ctrl - t : yabai -m window --toggle float --grid 4:6:2:1:2:2

# toggle sticky(+float), picture-in-picture
alt + ctrl + shift - t : yabai -m window --toggle sticky --toggle pip

# default bsp layout
alt + ctrl - r : bsp_layout

# 3 column layout (when 3 screens are open)
alt + ctrl - f : three_column_layout

# }}}

